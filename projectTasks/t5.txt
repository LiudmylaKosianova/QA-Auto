Проєктне завдання 5


Примітки від автора:

Це проєктне завдання розбито на дві частини:
Обов’язкова частина, з повним і детальним описом 
Індивідуальна частина, повна ідея та реалізація, якої залежить лише від вашої уяви та можливостей 
Ідея індивідуальної частини має максимально відрізнятися, де це звичайно можливо, від обов’язкової частини 
Немає поганих ідей для індивідуальної частини, проте намагайтеся підібрати ідею таким чином, щоб вона максимально продемонструвала ваші можливості і знання
Наприкінці обов'язкової частини проєктного завдання  можете знайти підказки для ідей індивідуальної частини.

Зверніть увагу, що деякі назви файлів у проєктних завданнях можуть відрізнятися від наведених у лекціях. Будьте уважні. Виконуйте згідно інструкцій в обов'язковій частині
Розробити тести для тестування бази даних, 
використовуючи при цьому модулі pytest та sqlite3.

Обовязкова частина:

В склонованому репозиторії, використовуючи результати попереднього модуля, розробити тести, використовуючи модуль pytest та sqlite3, які відповідають наступним вимогам:

Мітка database зареєстрована в pytest.ini файлі.
В файлі /modules/common/database.py створити клас Database.
Клас має конструктор, в якому ініціалізовані два атрибути об’єкта:
self.connection - об’єкт, який реалізує з'єднання з базою даних (див. Лекцію 18.4)
self.cursor - курсор об’єкта self.connection (див. Лекцію 18.4)
Клас має метод об’єкта test_connection:
Метод виконує SQL запит SELECT sqlite_version();
Результатом виконання методу є виведена в термінал версія бази даних.
Клас має метод об’єкта get_all_users:
Метод має повернути із таблиці customers значення полів name, address, city для всіх користувачів
Клас має метод об’єкта get_user_address_by_name:
Метод має обов’язковий параметр name
Метод має повернути із таблиці customers значення полів address, city, postalCode, country для користувача з іменем name
Клас має метод об’єкта update_product_qnt_by_id:
Метод має обов’язкові параметри product_id, qnt
Метод має змінити кількість товару за вказаним в парметрі product_id унікальним значенням в таблиці products на значення вказаного в параметрі qnt
Клас має метод об’єкта select_product_qnt_by_id:
Метод має обов’язковий параметр product_id
Метод має повернути кількість товару за вказаним в парметрі product_id унікальним значенням із таблиці products
Клас має метод об’єкта insert_product:
Метод має обов’язкові параметри product_id, name, description, qnt
Метод має вставити, або замінити дані в таблиці products для колонок id, name, description, quantity. Дані взяти з параметрів product_id, name, description, qnt
Клас має метод об’єкта delete_product_by_id:
Метод має обов’язковий параметр product_id
Метод має видалити товар за вказаним в парметрі product_id унікальним значенням із таблиці products
Клас має метод об’єкта get_detailed_orders:
Використовуючи команду JOIN та таблиці orders, customers, products, повернути із таблиці orders наступну інформацію у відповідному порядку: унікальний номер замовлення, ім’я покупця, ім’я замовленого продукту, опис замовленого продукту, дату замовлення
В файлі /tests/database/test_database.py створити тест test_database_connection:
Тест має мітку database
В тілі тесту створити екземпляр класу Database
В тілі тесту виконати метод об’єкта test_connection
В файлі /tests/database/test_database.py створити тест test_check_all_users:
Тест має мітку database
В тілі тесту створити екземпляр класу Database
В тілі тесту виконати метод об’єкта get_all_users
Вивести в термінал результат виконання методу об’єкта get_all_users
В файлі /tests/database/test_database.py створити тест test_check_user_sergii:
Тест має мітку database
В тілі тесту створити екземпляр класу Database
В тілі тесту виконати метод об’єкта get_user_address_by_name зі значенням параметру name = Sergii
Перевірити, що дані, які повернув метод get_user_address_by_name  відповідають наступним даним:
Maydan Nezalezhnosti 1
Kyiv
3127
Ukraine
В файлі /tests/database/test_database.py створити тест test_product_qnt_update:
Тест має мітку database
В тілі тесту створити екземпляр класу Database
В тілі тесту виконати метод об’єкта update_product_qnt_by_id зі значенням параметрів product_id = 1 та qnt = 25
Перевірити, що після оновлення даних кількість товару з унікальним номером 1 дорівнює 25
В файлі /tests/database/test_database.py створити тест test_product_insert:
Тест має мітку database
В тілі тесту створити екземпляр класу Database
В тілі тесту виконати метод об’єкта insert_product зі значенням параметрів product_id = 4, name = печиво, description = солодке, qnt = 30
Перевірити, що після оновлення даних, кількість товару з унікальним номером 4 дорівнює 30
В файлі /tests/database/test_database.py створити тест test_product_delete:
Тест має мітку database
В тілі тесту створити екземпляр класу Database
В тілі тесту створити тестові дані, створивши продукт в таблиці products зі значеннями параметрів product_id = 99, name = тестові, description = дані, qnt = 999
В тілі тесту видалити дані з таблички products зі значенням параметра product_id = 99
Перевірити, що кількість рядків, що було знайдено дорівнює 0
В файлі /tests/database/test_database.py створити тест test_detailed_orders:
Тест має мітку database
В тілі тесту створити екземпляр класу Database
В тілі тесту вивести в термінал результат виконання методу get_detailed_orders об’єкта класу Database 
Перевірити, що кількість знайдених результатів дорівнює 1
Перевірити, що дані, які повернув метод get_detailed_orders,  відповідають наступним даним:
1
Sergii
солодка вода
з цукром
Всі створені, змінені та видалені файли додати до коміта і відправити на сервер GitHub за допомогою команди git push.

Підказки для індивідуальних завдань:

В більшості випадків при тестуванні бази даних ви будете перевіряти саме дані, 
а не структуру таблиць, тому напишіть якомога більше тестів, які перевіряють роботу з даними.
Наприклад:
    * Неможливість додати тип даних, що не підтримує система\база даних
    * Коректність обробки різних типів даних
    * Тощо
Реалізувати мінімум 5-10 тестів